defmodule Problem_2 do
  @moduledoc """
    http://projecteuler.net/problem=2

    Even Fibonacci numbers

    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.

    ## Example

      iex> Problem_2.solution
      4613732
  """
  def solution do
    terms_up_to(4_000_000) |> even |> sum
  end

  @doc """
    Get all fibonacci values up to a specific value.

    ## Example

      iex> Problem_2.terms_up_to(90)
      [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

  """
  def terms_up_to(max) do
    Stream.unfold({1,2}, fn {f1,f2} -> {f1, {f2, f1+f2}} end)
      |> Enum.take_while fn(x) -> x < max end
  end


  @doc """
    Only keep odd numbers from a list
    ## Example

      iex> Problem_2.even([1,2,3,4,5,6])
      [2,4,6]
  """
  def even(list) do
    Enum.reject list, fn(x) -> rem(x, 2) != 0 end
  end

  def sum(list) do
    Enum.reduce list, fn(x, acc) -> acc + x end
  end

end
